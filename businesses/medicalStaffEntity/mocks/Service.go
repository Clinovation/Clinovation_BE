// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	medicalStaffEntity "github.com/Clinovation/Clinovation_BE/businesses/medicalStaffEntity"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: ctx, data, id
func (_m *Service) ChangePassword(ctx context.Context, data *medicalStaffEntity.Domain, id string) (*medicalStaffEntity.Domain, error) {
	ret := _m.Called(ctx, data, id)

	var r0 *medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *medicalStaffEntity.Domain, string) *medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, data, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalStaffEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *medicalStaffEntity.Domain, string) error); ok {
		r1 = rf(ctx, data, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMedicalStaff provides a mock function with given fields: ctx, id
func (_m *Service) DeleteMedicalStaff(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, name, page
func (_m *Service) FindByName(ctx context.Context, name string, page int) ([]medicalStaffEntity.Domain, int, int, int64, error) {
	ret := _m.Called(ctx, name, page)

	var r0 []medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, name, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]medicalStaffEntity.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, int) int); ok {
		r1 = rf(ctx, name, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, string, int) int); ok {
		r2 = rf(ctx, name, page)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 int64
	if rf, ok := ret.Get(3).(func(context.Context, string, int) int64); ok {
		r3 = rf(ctx, name, page)
	} else {
		r3 = ret.Get(3).(int64)
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(context.Context, string, int) error); ok {
		r4 = rf(ctx, name, page)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// FindByNik provides a mock function with given fields: ctx, nik, page
func (_m *Service) FindByNik(ctx context.Context, nik string, page int) ([]medicalStaffEntity.Domain, int, int, int64, error) {
	ret := _m.Called(ctx, nik, page)

	var r0 []medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, nik, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]medicalStaffEntity.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, int) int); ok {
		r1 = rf(ctx, nik, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, string, int) int); ok {
		r2 = rf(ctx, nik, page)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 int64
	if rf, ok := ret.Get(3).(func(context.Context, string, int) int64); ok {
		r3 = rf(ctx, nik, page)
	} else {
		r3 = ret.Get(3).(int64)
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(context.Context, string, int) error); ok {
		r4 = rf(ctx, nik, page)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// FindByUuid provides a mock function with given fields: ctx, uuid
func (_m *Service) FindByUuid(ctx context.Context, uuid string) (medicalStaffEntity.Domain, error) {
	ret := _m.Called(ctx, uuid)

	var r0 medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(medicalStaffEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgetPassword provides a mock function with given fields: ctx, data
func (_m *Service) ForgetPassword(ctx context.Context, data *medicalStaffEntity.Domain) (*medicalStaffEntity.Domain, error) {
	ret := _m.Called(ctx, data)

	var r0 *medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *medicalStaffEntity.Domain) *medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalStaffEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *medicalStaffEntity.Domain) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMedicalStaff provides a mock function with given fields: ctx, page
func (_m *Service) GetMedicalStaff(ctx context.Context, page int) (*[]medicalStaffEntity.Domain, int, int, int64, error) {
	ret := _m.Called(ctx, page)

	var r0 *[]medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) *[]medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]medicalStaffEntity.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int) int); ok {
		r1 = rf(ctx, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, int) int); ok {
		r2 = rf(ctx, page)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 int64
	if rf, ok := ret.Get(3).(func(context.Context, int) int64); ok {
		r3 = rf(ctx, page)
	} else {
		r3 = ret.Get(3).(int64)
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(context.Context, int) error); ok {
		r4 = rf(ctx, page)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *Service) Login(ctx context.Context, email string, password string) (string, error) {
	ret := _m.Called(ctx, email, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, data
func (_m *Service) Register(ctx context.Context, data *medicalStaffEntity.Domain) (*medicalStaffEntity.Domain, error) {
	ret := _m.Called(ctx, data)

	var r0 *medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *medicalStaffEntity.Domain) *medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalStaffEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *medicalStaffEntity.Domain) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: ctx, data, id
func (_m *Service) UpdateById(ctx context.Context, data *medicalStaffEntity.Domain, id string) (*medicalStaffEntity.Domain, error) {
	ret := _m.Called(ctx, data, id)

	var r0 *medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *medicalStaffEntity.Domain, string) *medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, data, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalStaffEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *medicalStaffEntity.Domain, string) error); ok {
		r1 = rf(ctx, data, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadAvatar provides a mock function with given fields: ctx, id, fileLocation
func (_m *Service) UploadAvatar(ctx context.Context, id string, fileLocation string) (*medicalStaffEntity.Domain, error) {
	ret := _m.Called(ctx, id, fileLocation)

	var r0 *medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, id, fileLocation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalStaffEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, fileLocation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
