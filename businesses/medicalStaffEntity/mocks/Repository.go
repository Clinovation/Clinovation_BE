// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	medicalStaffEntity "github.com/Clinovation/Clinovation_BE/businesses/medicalStaffEntity"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateNewMedicalStaff provides a mock function with given fields: ctx, data
func (_m *Repository) CreateNewMedicalStaff(ctx context.Context, data *medicalStaffEntity.Domain) (*medicalStaffEntity.Domain, error) {
	ret := _m.Called(ctx, data)

	var r0 *medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *medicalStaffEntity.Domain) *medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalStaffEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *medicalStaffEntity.Domain) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMedicalStaffByUuid provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteMedicalStaffByUuid(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgetPassword provides a mock function with given fields: ctx, nik, email
func (_m *Repository) ForgetPassword(ctx context.Context, nik string, email string) (medicalStaffEntity.Domain, error) {
	ret := _m.Called(ctx, nik, email)

	var r0 medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string) medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, nik, email)
	} else {
		r0 = ret.Get(0).(medicalStaffEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, nik, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *Repository) GetByEmail(ctx context.Context, email string) (medicalStaffEntity.Domain, error) {
	ret := _m.Called(ctx, email)

	var r0 medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(medicalStaffEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetByID(ctx context.Context, id uint) (medicalStaffEntity.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(medicalStaffEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, name, offset, limit
func (_m *Repository) GetByName(ctx context.Context, name string, offset int, limit int) ([]medicalStaffEntity.Domain, int64, error) {
	ret := _m.Called(ctx, name, offset, limit)

	var r0 []medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, name, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]medicalStaffEntity.Domain)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int64); ok {
		r1 = rf(ctx, name, offset, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, name, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByNik provides a mock function with given fields: ctx, nik
func (_m *Repository) GetByNik(ctx context.Context, nik string) (medicalStaffEntity.Domain, error) {
	ret := _m.Called(ctx, nik)

	var r0 medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, nik)
	} else {
		r0 = ret.Get(0).(medicalStaffEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nik)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNikByQuery provides a mock function with given fields: ctx, nik, offset, limit
func (_m *Repository) GetByNikByQuery(ctx context.Context, nik string, offset int, limit int) ([]medicalStaffEntity.Domain, int64, error) {
	ret := _m.Called(ctx, nik, offset, limit)

	var r0 []medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, nik, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]medicalStaffEntity.Domain)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int64); ok {
		r1 = rf(ctx, nik, offset, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, nik, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByUuid provides a mock function with given fields: ctx, uuid
func (_m *Repository) GetByUuid(ctx context.Context, uuid string) (medicalStaffEntity.Domain, error) {
	ret := _m.Called(ctx, uuid)

	var r0 medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(medicalStaffEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMedicalStaff provides a mock function with given fields: ctx, offset, limit
func (_m *Repository) GetMedicalStaff(ctx context.Context, offset int, limit int) (*[]medicalStaffEntity.Domain, int64, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 *[]medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *[]medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]medicalStaffEntity.Domain)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, int, int) int64); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateMedicalStaff provides a mock function with given fields: ctx, id, data
func (_m *Repository) UpdateMedicalStaff(ctx context.Context, id string, data *medicalStaffEntity.Domain) (*medicalStaffEntity.Domain, error) {
	ret := _m.Called(ctx, id, data)

	var r0 *medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, *medicalStaffEntity.Domain) *medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalStaffEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *medicalStaffEntity.Domain) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadAvatar provides a mock function with given fields: ctx, id, data
func (_m *Repository) UploadAvatar(ctx context.Context, id string, data *medicalStaffEntity.Domain) (*medicalStaffEntity.Domain, error) {
	ret := _m.Called(ctx, id, data)

	var r0 *medicalStaffEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, *medicalStaffEntity.Domain) *medicalStaffEntity.Domain); ok {
		r0 = rf(ctx, id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalStaffEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *medicalStaffEntity.Domain) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
