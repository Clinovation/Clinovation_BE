// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	medicalRecordEntity "github.com/Clinovation/Clinovation_BE/businesses/medicalRecordEntity"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateMedicalRecord provides a mock function with given fields: ctx, data, userID, medicalStaffID, patientID
func (_m *Service) CreateMedicalRecord(ctx context.Context, data *medicalRecordEntity.Domain, userID string, medicalStaffID string, patientID string) (*medicalRecordEntity.Domain, error) {
	ret := _m.Called(ctx, data, userID, medicalStaffID, patientID)

	var r0 *medicalRecordEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *medicalRecordEntity.Domain, string, string, string) *medicalRecordEntity.Domain); ok {
		r0 = rf(ctx, data, userID, medicalStaffID, patientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalRecordEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *medicalRecordEntity.Domain, string, string, string) error); ok {
		r1 = rf(ctx, data, userID, medicalStaffID, patientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMedicalRecord provides a mock function with given fields: ctx, id
func (_m *Service) DeleteMedicalRecord(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUuid provides a mock function with given fields: ctx, uuid
func (_m *Service) FindByUuid(ctx context.Context, uuid string) (medicalRecordEntity.Domain, error) {
	ret := _m.Called(ctx, uuid)

	var r0 medicalRecordEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) medicalRecordEntity.Domain); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(medicalRecordEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMedicalRecordsByMedicalStaff provides a mock function with given fields: ctx, userID, page
func (_m *Service) GetMedicalRecordsByMedicalStaff(ctx context.Context, userID string, page int) (*[]medicalRecordEntity.Domain, int, int, int64, error) {
	ret := _m.Called(ctx, userID, page)

	var r0 *[]medicalRecordEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *[]medicalRecordEntity.Domain); ok {
		r0 = rf(ctx, userID, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]medicalRecordEntity.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, int) int); ok {
		r1 = rf(ctx, userID, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, string, int) int); ok {
		r2 = rf(ctx, userID, page)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 int64
	if rf, ok := ret.Get(3).(func(context.Context, string, int) int64); ok {
		r3 = rf(ctx, userID, page)
	} else {
		r3 = ret.Get(3).(int64)
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(context.Context, string, int) error); ok {
		r4 = rf(ctx, userID, page)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// GetMedicalRecordsQueue provides a mock function with given fields: ctx, userID, page
func (_m *Service) GetMedicalRecordsQueue(ctx context.Context, userID string, page int) (*[]medicalRecordEntity.Domain, int, int, int64, error) {
	ret := _m.Called(ctx, userID, page)

	var r0 *[]medicalRecordEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *[]medicalRecordEntity.Domain); ok {
		r0 = rf(ctx, userID, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]medicalRecordEntity.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, int) int); ok {
		r1 = rf(ctx, userID, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, string, int) int); ok {
		r2 = rf(ctx, userID, page)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 int64
	if rf, ok := ret.Get(3).(func(context.Context, string, int) int64); ok {
		r3 = rf(ctx, userID, page)
	} else {
		r3 = ret.Get(3).(int64)
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(context.Context, string, int) error); ok {
		r4 = rf(ctx, userID, page)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// UpdateById provides a mock function with given fields: ctx, data, userID, medicalStaffID, patientId, id
func (_m *Service) UpdateById(ctx context.Context, data *medicalRecordEntity.Domain, userID string, medicalStaffID string, patientId string, id string) (*medicalRecordEntity.Domain, error) {
	ret := _m.Called(ctx, data, userID, medicalStaffID, patientId, id)

	var r0 *medicalRecordEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *medicalRecordEntity.Domain, string, string, string, string) *medicalRecordEntity.Domain); ok {
		r0 = rf(ctx, data, userID, medicalStaffID, patientId, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalRecordEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *medicalRecordEntity.Domain, string, string, string, string) error); ok {
		r1 = rf(ctx, data, userID, medicalStaffID, patientId, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
