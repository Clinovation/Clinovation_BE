// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	medicalRecordEntity "github.com/Clinovation/Clinovation_BE/businesses/medicalRecordEntity"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateNewMedicalRecord provides a mock function with given fields: ctx, data
func (_m *Repository) CreateNewMedicalRecord(ctx context.Context, data *medicalRecordEntity.Domain) (*medicalRecordEntity.Domain, error) {
	ret := _m.Called(ctx, data)

	var r0 *medicalRecordEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *medicalRecordEntity.Domain) *medicalRecordEntity.Domain); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalRecordEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *medicalRecordEntity.Domain) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMedicalRecordByUuid provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteMedicalRecordByUuid(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetByID(ctx context.Context, id uint) (medicalRecordEntity.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 medicalRecordEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) medicalRecordEntity.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(medicalRecordEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUuid provides a mock function with given fields: ctx, uuid
func (_m *Repository) GetByUuid(ctx context.Context, uuid string) (medicalRecordEntity.Domain, error) {
	ret := _m.Called(ctx, uuid)

	var r0 medicalRecordEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) medicalRecordEntity.Domain); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(medicalRecordEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMedicalRecordsByMedicalStaff provides a mock function with given fields: ctx, userID, offset, limit
func (_m *Repository) GetMedicalRecordsByMedicalStaff(ctx context.Context, userID uint, offset int, limit int) (*[]medicalRecordEntity.Domain, int64, error) {
	ret := _m.Called(ctx, userID, offset, limit)

	var r0 *[]medicalRecordEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint, int, int) *[]medicalRecordEntity.Domain); ok {
		r0 = rf(ctx, userID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]medicalRecordEntity.Domain)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, uint, int, int) int64); ok {
		r1 = rf(ctx, userID, offset, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, uint, int, int) error); ok {
		r2 = rf(ctx, userID, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMedicalRecordsQueue provides a mock function with given fields: ctx, userID, offset, limit
func (_m *Repository) GetMedicalRecordsQueue(ctx context.Context, userID uint, offset int, limit int) (*[]medicalRecordEntity.Domain, int64, error) {
	ret := _m.Called(ctx, userID, offset, limit)

	var r0 *[]medicalRecordEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint, int, int) *[]medicalRecordEntity.Domain); ok {
		r0 = rf(ctx, userID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]medicalRecordEntity.Domain)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, uint, int, int) int64); ok {
		r1 = rf(ctx, userID, offset, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, uint, int, int) error); ok {
		r2 = rf(ctx, userID, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateMedicalRecord provides a mock function with given fields: ctx, id, data
func (_m *Repository) UpdateMedicalRecord(ctx context.Context, id string, data *medicalRecordEntity.Domain) (*medicalRecordEntity.Domain, error) {
	ret := _m.Called(ctx, id, data)

	var r0 *medicalRecordEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, *medicalRecordEntity.Domain) *medicalRecordEntity.Domain); ok {
		r0 = rf(ctx, id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalRecordEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *medicalRecordEntity.Domain) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
